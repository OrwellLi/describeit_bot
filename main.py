import openai
import sys
import logging
import random
from aiogram import Bot, Dispatcher, types
from db import Database


import asyncio
# from aiogram.filters import Text
from aiogram import F, Router

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import aiogram.utils.markdown as md
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from product_description_generator import generate_product_description
from aiogram.types import Message
logging.basicConfig(level=logging.INFO)

TOKEN = "7126423804:AAHt8_p1hz0PTY3_ZfTGBqJCq8ULW6BQXN4"
# api_key = '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'
logging.basicConfig(level=logging.INFO)


db = Database("database.db")

dp = Dispatcher(storage=MemoryStorage())
bot = Bot(TOKEN)

router = Router()
flag = 1



class Card(StatesGroup):
    
    set_card_name = State()
    set_card_description = State()
    set_card_keys = State()
    generate = State()

class Promo(StatesGroup):
    promo = State()




@dp.message(CommandStart())
async def start(message: types.Message):
    global flag
    flag = 1
    markup = InlineKeyboardBuilder()
    markup.row(types.InlineKeyboardButton(text = "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data = "login"))
    await bot.send_message(message.chat.id, f"–î–ª—è —Ç–æ–≥–æ, <b>—á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</b>, –≤–∞–º –Ω—É–∂–Ω–æ <b>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!</b>",parse_mode=ParseMode.HTML, reply_markup=markup.as_markup())
flag = 0

@dp.callback_query(F.data == "login")
async def login(callback_query: types.CallbackQuery):
    global flag
    flag = 1
    if (not db.user_exists(callback_query.from_user.id)):
        db.add_user(callback_query.from_user.id)
        db.add_users_balance(callback_query.from_user.id)
        db.add_users_product(callback_query.from_user.id)
        await bot.send_message(callback_query.from_user.id, f"<b>–ü—Ä–∏–¥—É–π–º–∞–π—Ç–µ –Ω–∏–∫–Ω–µ–π–º.</b>", parse_mode=ParseMode.HTML)

    else:
        await bot.send_message(callback_query.from_user.id, "<b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>")
        await bot.send_sticker(callback_query.from_user.id,"CAACAgIAAxkBAAEL0YxmCKM8rgXl2qdkHb5n5alqcqOypgAC-woAAm80oUssauxdTRu1eDQE")
        markup = InlineKeyboardBuilder()
        markup.add(types.InlineKeyboardButton(text = "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data = "/keyphrases"))
        markup.add(types.InlineKeyboardButton(text = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data = "/balance"))
        await bot.send_message(callback_query.from_user.id, "‚ö™ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup.as_markup())
        db.set_key( callback_query.from_user.id, "notkey")
flag = 0


@dp.message(Card.set_card_name)
async def process_name(message:types.Message, state: FSMContext):   
    # db.get_product_name(message.from_user.id)
    # db.set_product_name(message.from_user.id, message.text)
    await state.set_state(Card.set_card_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    # async with state.proxy() as data:
    #     data['card_name'] = message.text
    await state.update_data(card_name = message.text)
    
@dp.message(Card.set_card_description)
async def process_age(message: types.Message, state: FSMContext):
    # db.get_product_descrip(message.from_user.id)
    # db.set_product_descrip(message.from_user.id, message.text)
    await state.set_state(Card.set_card_keys)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏:")
    # async with state.proxy() as data:
    #     data['card_description'] = message.text
    await state.update_data(card_descrip = message.text)
flag = 0
@dp.message(Card.set_card_keys)
async def process_gender(message: types.Message, state: FSMContext):
    global flag
    flag = 1
    # db.get_product_key(message.from_user.id)
    # db.set_product_key(message.from_user.id, message.text)
    # async with state.proxy() as data:
    #     data['card_keys'] = message.text
    await state.update_data(card_keys = message.text)
    data = await state.get_data()
    card_name = data['card_name']
    card_descrip = data['card_descrip']
    card_keys = data['card_keys']
    markup = InlineKeyboardBuilder()
    await state.set_state(Card.generate)
    markup.add(types.InlineKeyboardButton(text = "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?", callback_data = "/generate"))
    markup.add(types.InlineKeyboardButton(text = "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data = "menu"))
    await bot.send_message(message.from_user.id, text = f"‚úâ <b>–í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>\n\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏</b>: {card_name}\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ  —Ç–æ–≤–∞—Ä–∞</b>: {card_descrip}\n\n<b>–ö–ª—é—á–µ–≤—ã —Å–ª–æ–≤–∞ —Ç–æ–≤–∞—Ä–∞</b>: {card_keys}\n\n",parse_mode=ParseMode.HTML, reply_markup=markup.as_markup())
    flag = 0
    

@dp.message(Promo.promo)
async def state_promocode(message: types.Message, state: FSMContext):
    await state.update_data(promo = message.text)
    data1 = await state.get_data()
    promo = data1['promo']
    if promo == db.get_promo(1):
        db.plus_balance(message.from_user.id, 5)
        
        markup = InlineKeyboardBuilder()
        markup.add(types.InlineKeyboardButton(text = "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data = "menu"))
        await bot.send_message(message.from_user.id, text= "üçÄ –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥!\n\n–ö –≤–∞—à–µ–º—É –±–∞–ª–∞–Ω—Å—É –ø—Ä–∏–±–∞–≤–ª–µ–Ω–æ <b>5 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.</b>", parse_mode=ParseMode.HTML, reply_markup=markup.as_markup())
        await state.clear()
    else:
        markup = InlineKeyboardBuilder()
        markup.add(types.InlineKeyboardButton(text = "–í–µ—Ä–Ω—É—Ç—å—Å—è ", callback_data = "menu"))
        await message.answer(f"‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.", parse_mode=ParseMode.HTML, reply_markup=markup.as_markup())
                

    
    
@dp.callback_query(F.data == "/generate", Card.generate)
async def keyphrases_balance_def(callback_query: types.CallbackQuery, state: FSMContext):
    global flag
    flag = 1
    
    db.minus_balance(callback_query.from_user.id, 1)
    await bot.send_sticker(callback_query.from_user.id,("CAACAgIAAxkBAAEL0YpmCJ4qTSZ5tAyHLhI3Gxnovz2WGAACOAsAAk7kmUsysUfS2U-M0DQE"))
    upload_message = await bot.send_message(callback_query.from_user.id, text= f"<b>–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...</b>", parse_mode=ParseMode.HTML)
    await asyncio.sleep(2)
    for i in range(100):
        await upload_message.edit_text(text=f"<b>{i}%</b>", parse_mode=ParseMode.HTML)
        await asyncio.sleep(0.01)
        if i == 94:
            await upload_message.delete()
            break
    data = await state.get_data()
    card_name = data['card_name']
    card_descrip = data['card_descrip']
    card_keys = data['card_keys']
    
    description = generate_product_description(api_key, card_name, card_descrip, card_keys)
    markup1 = InlineKeyboardBuilder()
    markup1.add(types.InlineKeyboardButton(text = "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data = "menu"))
    await bot.send_message(callback_query.from_user.id, f"<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏:</b>\n\n<code>{description}</code>",parse_mode=ParseMode.HTML, reply_markup=markup1.as_markup())
    db.set_key(callback_query.from_user.id, "notkey")
    
    # db.set_product_descrip(callback_query.from_user.id, card_descrip)
    db.set_product_key(callback_query.from_user.id, description)
    await callback_query.answer()
 
    await state.clear()

flag = 0



@dp.message()
async def nicknaming(message: Message, state: FSMContext):
    if message.chat.type == "private":
 
        if db.get_signup(message.from_user.id) == "setnickname":
            if (len(message.text) > 15):
                await bot.send_message(message.text, "‚ùå Too large nickname / u need < 15 symbols")
            elif '@' in message.text or '/' in message.text or '"' in message.text or '~' in message.text:
                await bot.send_message(message.text, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–∏–∫–Ω–µ–π–º–∞")
            else:
                db.set_nickname(message.from_user.id, message.text)
                db.set_signup(message.from_user.id, "done")
                await bot.send_message(message.from_user.id, "üåÄ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!")
                await bot.send_sticker(message.from_user.id,"CAACAgIAAxkBAAEL0YxmCKM8rgXl2qdkHb5n5alqcqOypgAC-woAAm80oUssauxdTRu1eDQE")
                markup = InlineKeyboardBuilder()
                markup.add(types.InlineKeyboardButton(text = "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data = "/keyphrases"))
                markup.add(types.InlineKeyboardButton(text = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data = "/balance"))
                await bot.send_message(message.from_user.id, "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup.as_markup())
                db.set_key( message.from_user.id, "notkey")
            # await bot.send_message(message.from_user.id, "What??")
        elif db.get_key(message.from_user.id) == 'key':
            if message.text == "addcard":
                # await state.set_state(Card.set_card_name)
                # await bot.send_message(message.from_user.id, f"üìå <u>The example of the card:</u>\n\n<b>Card NAME:</b>\n\n<b>Card DESCRIPTION:</b>\n\n<b>Card KEY-WORDS:</b>\n\nFor adding a new card description, send the <b>CARD NAME</b>:\n\n",parse_mode = ParseMode.HTML)
                # # await bot.send_message(message.from_user.id, "For adding a new card description, send <addcard>.\n\nThe example of the card:\n\nCards` name\nCards` description")
                # db.set_key(message.from_user.id, "notkey")
                # await message.answer(message.from_user.id, f"Please enter your CARD DESCRIPTION:")
                await state.set_state(Card.set_card_name)
                
                await bot.send_message(message.from_user.id, f"üìå <u>–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞:</u>\n\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>\n\n<b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ç–æ–≤–∞—Ä–∞:</b>\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>:\n\n",parse_mode = ParseMode.HTML)
                # await bot.send_message(message.from_user.id, "For adding a new card description, send <addcard>.\n\nThe example of the card:\n\nCards` name\nCards` description")
                db.set_key(message.from_user.id, "notkey")
            elif message.text != "addcard":
                await bot.send_sticker(message.from_user.id,"CAACAgIAAxkBAAEL2CRmDsUfOrCE44ssXVrF9aYpasoQEwACvAsAAv0XmUtFBR2JSwp5RzQE")
                markup = InlineKeyboardBuilder()
                markup.row(types.InlineKeyboardButton(text = "–ó–∞–∫—Ä—ã—Ç—å", callback_data = "menu"))
                await message.answer(f"‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã...\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—É—é —Ñ—Ä–∞–∑—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ó–ê–ö–†–´–¢–¨</b> –¥–ª—è <b>–≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", parse_mode=ParseMode.HTML, reply_markup=markup.as_markup())
            
        elif flag == 0:
            if message.text != "":
                await bot.send_sticker(message.from_user.id,"CAACAgIAAxkBAAEL2CRmDsUfOrCE44ssXVrF9aYpasoQEwACvAsAAv0XmUtFBR2JSwp5RzQE")
                markup = InlineKeyboardBuilder()
                markup.add(types.InlineKeyboardButton(text = "–í–µ—Ä–Ω—É—Ç—å—Å—è ", callback_data = "menu"))
                await message.answer(f"‚ùå –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã <b>–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É</b> —Å –±–æ—Ç–æ–º.", parse_mode=ParseMode.HTML, reply_markup=markup.as_markup())
                # markup = types.InlineKeyboardMarkup()
                # markup.add(types.InlineKeyboardButton("Generate?", callback_data = "/generate"))
                # markup.add(types.InlineKeyboardButton("Back to menu", callback_data = "menu"))
                # await bot.send_message(message.from_user.id, f"Your key-prase for generating is '{message.text}'\n\n", reply_markup=markup) 


# @dp.message()
# async def entereing(message: Message):
#     if message.chat.type == "private":
#         if message.text != "":
#             await bot.send_sticker(message.from_user.id,"CAACAgIAAxkBAAEL2CRmDsUfOrCE44ssXVrF9aYpasoQEwACvAsAAv0XmUtFBR2JSwp5RzQE")
#             markup = InlineKeyboardBuilder()
#             markup.add(types.InlineKeyboardButton(text = "–í–µ—Ä–Ω—É—Ç—å—Å—è ", callback_data = "menu"))
#             await message.answer(f"‚ùå –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã <b>–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É</b> —Å –±–æ—Ç–æ–º.", parse_mode=ParseMode.HTML, reply_markup=markup.as_markup())


# @dp.callback_query(F.data == "menu", Card.generate)
# async def menu_def(callback_query: types.CallbackQuery, state: FSMContext):
#     db.set_key( callback_query.from_user.id, 'notkey')
#     markup = InlineKeyboardBuilder()
#     markup.add(types.InlineKeyboardButton("ADD CARD", callback_data = "/keyphrases"))
#     markup.add(types.InlineKeyboardButton("CHECK MY BALANCE", callback_data = "/balance"))
#     await bot.send_message(callback_query.from_user.id, f"‚ö™ <b>What would you like to do?</b>", parse_mode=ParseMode.HTML, reply_markup=markup.as_markup() )
#     await callback_query.answer()
#     await state.clear()



@dp.callback_query(F.data == "/keyphrases")
async def keyphrases_balance_def(callback_query: types.CallbackQuery):
    global flag
    flag = 1
    if callback_query.data == "/keyphrases":
        db.set_key(callback_query.from_user.id, "notkey")  
        balance = db.check_balance(callback_query.from_user.id)
        for row in balance:
            balance = row[0]
        
        if balance <= 0:
            
            markup1 = InlineKeyboardBuilder()
            markup1.add(types.InlineKeyboardButton(text = "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data = "shop"))
            markup1.add(types.InlineKeyboardButton(text = "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data = "menu"))
            await bot.send_sticker(callback_query.from_user.id,("CAACAgIAAxkBAAEL0jxmCW0vKg-JkyyYZjS0VkgLxQtzGAACKwwAAiIwWEvIROJY0qdhFDQE"))
            await bot.send_message(callback_query.from_user.id, f"üí∂ You have <b>{balance}</b> coins on your balance\n\n Do you want <b>to buy</b> some more coins?",parse_mode=ParseMode.HTML, reply_markup=markup1.as_markup())
            await callback_query.answer()
        elif balance > 0:
            await bot.send_message(callback_query.from_user.id, f"üö® <b>–ü–†–û–í–ï–†–ö–ê</b>: –í–≤–µ–¥–∏—Ç–µ 'addcard', —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É!", parse_mode=ParseMode.HTML)
            db.set_key(callback_query.from_user.id, "key")

            # await bot.send_message(callback_query.from_user.id, "Please enter your cards` NAME")
            # markup = types.InlineKeyboardMarkup()
            # markup.add(types.InlineKeyboardButton("Add", callback_data = "add"))
            # await bot.send_message(callback_query.from_user.id, "For adding a new card description, click on the button <Add>", reply_markup=markup)
        flag = 0
        
@dp.callback_query(F.data == "/balance")
async def keyphrases_balance_def(callback_query: types.CallbackQuery):
    global flag
    flag = 1
    if callback_query.data == "/balance":
        # db.set_key( callback_query.from_user.id, 'notkey')
        await bot.send_sticker(callback_query.from_user.id,("CAACAgIAAxkBAAEL0jxmCW0vKg-JkyyYZjS0VkgLxQtzGAACKwwAAiIwWEvIROJY0qdhFDQE"))
        balance = db.check_balance(callback_query.from_user.id)
        for row in balance:
            balance = row[0]
        markup = InlineKeyboardBuilder()
        markup.add(types.InlineKeyboardButton(text = "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data = "/shop"))
        markup.add(types.InlineKeyboardButton(text = "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data = "menu"))
        await bot.send_message(callback_query.from_user.id, f"üí∂ –£ –≤–∞—Å <b>{balance}</b> –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n\n –í—ã —Ö–æ—Ç–∏—Ç–µ <b>–∫—É–ø–∏—Ç—å</b> –µ—â–µ <b>–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫</b>?",parse_mode=ParseMode.HTML, reply_markup=markup.as_markup())
        await callback_query.answer()
        flag = 0

        
@dp.callback_query(F.data == "/shop")
async def shop_def(callback_query: types.CallbackQuery):
    global flag
    flag = 1
    if callback_query.data == "/shop":
        
        markup = InlineKeyboardBuilder()
        markup.add(types.InlineKeyboardButton(text = "5 GENS", callback_data = "/5gens"))
        markup.add(types.InlineKeyboardButton(text = "10 GENS", callback_data = "/10gens"))
        markup.add(types.InlineKeyboardButton(text = "20 GENS", callback_data = "/20gens"))
        markup.row(types.InlineKeyboardButton(text = "–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data = "/promo"))
        markup.row(types.InlineKeyboardButton(text = "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data = "menu"))
        await bot.send_message(callback_query.from_user.id, f"üí∂ <b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é</b>, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥</b>, —á—Ç–æ–±—ã–≤ –≤–≤–µ—Å—Ç–∏ <b>–ø—Ä–æ–º–æ–∫–æ–¥:</b>", parse_mode=ParseMode.HTML,reply_markup=markup.as_markup())
        await callback_query.answer()
        flag = 0
        
@dp.callback_query(F.data == "/5gens")
async def shop_onclick_def(callback_query: types.CallbackQuery):
    if callback_query.data == "/5gens":
        await callback_query.answer(text='process buying 5 generations...', show_alert=True)
        
@dp.callback_query(F.data == "/10gens")
async def shop_onclick_def(callback_query: types.CallbackQuery):
    if callback_query.data == "/10gens":
        await callback_query.answer(text='process buying 10 generations...', show_alert=True)
    
@dp.callback_query(F.data == "/20gens")
async def shop_onclick_def(callback_query: types.CallbackQuery):
    if callback_query.data == "/20gens":
        await callback_query.answer(text='process buying 20 generations...', show_alert=True)
        
@dp.callback_query(F.data == "/promo")
async def promo_onclick(callback_query: types.CallbackQuery, state: FSMContext) :
    if callback_query.data == "/promo":
        await bot.send_sticker(callback_query.from_user.id,("CAACAgIAAxkBAAEL0jxmCW0vKg-JkyyYZjS0VkgLxQtzGAACKwwAAiIwWEvIROJY0qdhFDQE"))
        await state.set_state(Promo.promo)
        await bot.send_message(callback_query.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥: ")
        

    
@dp.callback_query(F.data == "menu")
async def menu_def(callback_query: types.CallbackQuery):
    global flag
    flag = 1
    db.set_key( callback_query.from_user.id, 'notkey')
    markup = InlineKeyboardBuilder()
    markup.add(types.InlineKeyboardButton(text = "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data = "/keyphrases"))
    markup.add(types.InlineKeyboardButton(text = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data = "/balance"))
    await bot.send_message(callback_query.from_user.id, f"‚ö™ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>", parse_mode=ParseMode.HTML,reply_markup=markup.as_markup())
    await callback_query.answer()
    flag = 0



async def main():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    )
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())